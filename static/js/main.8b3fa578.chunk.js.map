{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["SubMenu","Header","Content","Sider","App","className","theme","mode","defaultSelectedKeys","style","lineHeight","Item","key","width","background","defaultOpenKeys","height","borderRight","title","type","padding","margin","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAKQA,G,WAAAA,SACAC,E,IAAAA,OAAQC,E,IAAAA,QAASC,E,IAAAA,MA4DVC,MA1Df,WACE,OACE,2BACE,kBAACH,EAAD,CAAQI,UAAU,UAChB,yBAAKA,UAAU,SACf,uBACEC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAAC,KACtBC,MAAO,CAACC,WAAY,SAClB,sBAAMC,KAAN,CAAWC,IAAI,KAAf,SACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,SACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,WAGN,2BACE,kBAACT,EAAD,CAAOU,MAAO,IAAKJ,MAAO,CAACK,WAAY,SACrC,uBACEP,KAAK,SACLC,oBAAqB,CAAC,KACtBO,gBAAiB,CAAC,QAClBN,MAAO,CAAEO,OAAQ,OAAQC,YAAa,IACpC,kBAACjB,EAAD,CAASY,IAAI,OAAOM,MAAO,8BAAM,uBAAMC,KAAK,SAAjB,YACzB,sBAAMR,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,YAEF,kBAACZ,EAAD,CAASY,IAAI,OAAOM,MAAO,8BAAM,uBAAMC,KAAK,WAAjB,YACzB,sBAAMR,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,KAAf,YAEF,kBAACZ,EAAD,CAASY,IAAI,OAAOM,MAAO,8BAAM,uBAAMC,KAAK,iBAAjB,YACzB,sBAAMR,KAAN,CAAWC,IAAI,KAAf,WACA,sBAAMD,KAAN,CAAWC,IAAI,MAAf,YACA,sBAAMD,KAAN,CAAWC,IAAI,MAAf,YACA,sBAAMD,KAAN,CAAWC,IAAI,MAAf,eAKR,uBAAQH,MAAO,CAAEW,QAAS,gBAC1B,uBAAYX,MAAO,CAAEY,OAAQ,WAC3B,sBAAYV,KAAZ,aACA,sBAAYA,KAAZ,aACA,sBAAYA,KAAZ,aAEF,kBAACT,EAAD,CAASO,MAAO,CAAEK,WAAY,OAAQM,QAAS,GAAIC,OAAQ,EAAGC,UAAW,MAAzE,eC7CYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8b3fa578.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Header className=\"header\">\n        <div className=\"logo\"></div>\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={['2']}\n          style={{lineHeight: '64px'}}>\n            <Menu.Item key=\"1\">mav 1</Menu.Item>\n            <Menu.Item key=\"2\">mav 2</Menu.Item>\n            <Menu.Item key=\"3\">mav 3</Menu.Item>\n          </Menu>\n      </Header>\n      <Layout>\n        <Sider width={200} style={{background: '#fff'}}>\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={['1']}\n            defaultOpenKeys={['sub1']}\n            style={{ height: '100%', borderRight: 0}}>\n              <SubMenu key=\"sub1\" title={<span><Icon type=\"user\"/>Subnav1</span>}>\n                <Menu.Item key='1'>option1</Menu.Item>\n                <Menu.Item key='2'>option2</Menu.Item>\n                <Menu.Item key='3'>option3</Menu.Item>\n                <Menu.Item key='4'>option3</Menu.Item>\n              </SubMenu>\n              <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\"/>Subnav2</span>}>\n                <Menu.Item key='5'>option5</Menu.Item>\n                <Menu.Item key='6'>option6</Menu.Item>\n                <Menu.Item key='7'>option7</Menu.Item>\n                <Menu.Item key='8'>option8</Menu.Item>\n              </SubMenu>\n              <SubMenu key=\"sub3\" title={<span><Icon type=\"notification\"/>Subnav3</span>}>\n                <Menu.Item key='9'>option9</Menu.Item>\n                <Menu.Item key='10'>option10</Menu.Item>\n                <Menu.Item key='11'>option11</Menu.Item>\n                <Menu.Item key='12'>option12</Menu.Item>\n              </SubMenu>\n\n          </Menu>\n        </Sider>\n        <Layout style={{ padding: '0 24px 24px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>List</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <Content style={{ background: '#fff', padding: 24, margin: 0, minHeight: 280 }}>\n          Content\n        </Content>\n      </Layout>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}